<resources>
    <string name="app_name">LearnProgrammingApp</string>

    <string name="hint_email">Email</string>
    <string name="hint_password">Password</string>
    <string name="hint_name">Name</string>
    <string name="btn_login">LOGIN</string>
    <string name="btn_link_to_register">Not a member? Sign up now!</string>
    <string name="btn_link_to_login">Already registered! Login Me!</string>

    <string-array name="PYTHON_0">
        <item>Зачем изучать Python? Где используется?\n\n\nНа сегодняшний день Python входит в ТОП-3 востребованных языков программирования.\n\n\nPython используется для разработки веб-сайтов, игровых платформ, систем управления искусственным интеллектом. И даже используется в некоторых космических программах.</item>
        <item>Размышлять о надобности изучения этого языка программирования не приходится. И самое главное – Python-разработчикам готовы платить большие деньги.\n\n\nPython хорош тем, что лишен необходимости ставить навязчивые \";\". Но чувствителен к табуляции и регистру.</item>
        <item>В общем, познакомились. Остальное будет дальше.\n\n\nНа протяжении всего курса вы будете помогать «Соне» решать небольшие проблемы с созданием программ на Python. И попутно учиться.\n\n\n«Соня» очень надеется на вашу помощь. Поехали!</item>
    </string-array>

    <string-array name="PYTHON_1">
        <item>«Переменные. Ввод/вывод данных в консоль»\n\nПеременная – это ячейка в памяти, у которой есть имя, а внутри этой ячейки лежит какая-то информация определенного типа (например: слова, буквы, числа).\n\n\nУ Сони есть 2 коробочки. Они обе подписаны и в них можно положить только числа. При этом имя коробочек (переменных) не может начинаться с цифры или каких-либо знаков (только буквы) и не может содержать пробелы.</item>
        <item>Сейчас эти коробочки пустые. Соня их заполняет:\n\nBox1 = 5\nBox2 = 12\n\nТеперь она хочет сложить эти числа. Но их же нужно где-то хранить. Соня достаёт ещё одну коробочку и заполняет её:\nBoxSum = Box1 + Box2</item>
        <item>Круто. Кажется, это готовая программа. Чтобы вывести результат в консоль воспользуемся командой print():\n\nprint(BoxSum)\n\nВ консоли видим:\n17</item>
        <item>Воу! Это работает. Но Соня не собирается останавливаться на достигнутом. Теперь она хочет сделать программу, чтобы пользователь сам заполнял эти коробочки (переменные). Для этого есть команда input():\n\nBox1 = input()\nBox2 = input()\nBoxSum = Box1 + Box2\nprint(BoxSum)</item>
        <item>К сожалению, так сразу не получится. Дело в том, что в языке программирования Python все вводимые пользователем данные хранятся в переменных строкового (буквенного) типа.</item>
        <item>Хорошо. А какие типы переменных вообще существуют в Python? Вот их список:\n\n\n· boolean – логическое значение True или False\n\n· int – представляет целое число, например, 1, 4, 8, 50.\n\n· float – представляет число с плавающей точкой, например, 1.2 или 34.76\n\n· complex – комплексные числа\n\n· str – строки, например "hello". В Python 3.x строки представляют набор символов в кодировке Unicode\n\n· bytes – последовательность чисел в диапазоне 0–255\n\n· byte array - массив байтов, аналогичен bytes с тем отличием, что может изменяться\n\n· list - список\n\n· tuple - кортеж\n\n· set - неупорядоченная коллекция уникальных объектов\n\n· frozen set - то же самое, что и set, только не может изменяться (immutable)\n\n· dict - словарь, где каждый элемент имеет ключ и значени</item>
        <item>Хм. Слишком сложно!? Нет. Остановимся на одном, который нам нужен. Так как мы складываем два целых числа, то нам подходит тип данных int. Про остальные типы мы поговорим позже.</item>
        <item>Чтобы сделать из строки число, напишем так:\n\nBox1 = int(input())\nBox2 = int(input())\nBoxSum = Box1 + Box2\nprint(BoxSum)\n\nТеперь программа заработает как надо, и Соня сможет ввести числа с клавиатуры.</item>
        <item>То, что мы сейчас сделали, называется преобразование типов. Про это мы тоже поговорим чуть позже. А сейчас рассмотрим, какие арифметические операции можно проводить с переменными:\n\n\n· Сложение (Box1 + Box2)\n· Вычитание (Box1 - Box2)\n· Деление (Box1 / Box2)\n· Умножение (Box1 * Box2)\n· Получение целой части от деления (Box1 // Box2)\n· Остаток от деления (Box1 % Box2)\n· Возведение в степень (Box1 ** Box2</item>
        <item>За этот урок Соня узнала несколько новых команд:\n\n\n1. print() – выводит текст\n2. input() – позволяет вводить данные с клавиатуры\n3. int() – преобразовывает переменную типа «строка» (str) в целое число (int)</item>
    </string-array>

    <string-array name="CPLUS_0">
        <item>Язык программирования С++ является высокоуровневым языком, на котором возможно создание самых различных приложений.\n\nДанный язык можно использовать в программах любого уровня, в которых  важны скорость и производительность.\n\nС помощью С++ можно создавать графические приложения, игры с насыщенной визуализацией, различные мобильные приложения и даже web-приложения.</item>
        <item>Немного истории.\n\nЯзык С++ был разработан в 1979 году Бьерном Страуструпом в качестве дополнения к языку С. После создания Страуструп называл С++ как "C with classes" (С с классами).\n\nФактически С++ отличало от С только возможность объектно-ориентированного программирования.\n\nВ дальнейшем времени в новый язык были добавлены новые возможности, которые делали С с классами другим языком программирования, вследствие чего язык «С с классами» был переименован в С++. И с этого времени языки стали развиваться независимо друг от друга.\n\nОт С язык программирования С++ унаследовал богатые возможности по работе с памятью. Именно поэтому С++ находит своё применение в системном программировании, например, при создании антивирусов, операционных систем.\n\nБольшая часть ОС (операционной системы) Windows была создана на С++.</item>
    </string-array>

    <string-array name="CPLUS_1">
        <item>«Переменные»\n\nВсе переменные имеют тип данных, например, такой тип данных как int – целочисленный тип данных, может иметь в себе только целые числа.\n\nДля каждой переменной в программе тип данных присваивается при объявлении\n\nОсновные типы данных:\nint – целочисленный;\nfloat – с плавающей запятой;\ndouble – с плавающей запятой, двойной точности;\nbool – логический;\nchar – символьный</item>
        <item>Объявление переменных:\n\nint a;\nfloat b;\ndouble c;\nbool d = true;\nchar f = "s"</item>
    </string-array>

    <string-array name="CPLUS_2">
        <item>Первая программа.\n\nВ качестве среды разработки на Windows советуем использовать Visual Studio 2017.\n\nДля создания проекты нужно в открывшемся меня выбрать «Создать проект» затем «Консольное приложение», после нужно придумать любое название для программы и нажать «Создать»\n\nВот что получилось:\n\n</item>
        <item>Теперь рассмотрим синтаксис:\nДиректива #include необходима для подключения различных файлов. Строка #include &lt;iostream> отвечает за возможность ввода и вывода данных на экран.\n\nСтрока std::cout « "Hello World!\n"; означает вывод сообщения «Hello World!» на экран.\n\n</item>
        <item>Оператор cout нужен для вывода текстана экран консоли, после него идут («). Потом идет текст, который нужно вывести. Текст помещается в двойные кавычки.\n\nОператор (\\n) переводит текст на строку ниже.\n\nПосле каждой команды ставится точка с запятой(;)\n\nЗапуск программы.\nДля начала отладки программы достаточно нажать клавишу F5.\n\nРезультатом программы будет вывод в консоли строки «Hello World!»</item>
    </string-array>

    <string-array name="CSHARP_0">
        <item>\tУрок 0\n
\t«У вас диагноз – вы программист»\n\n
Раз вы скачали наше приложение и перешли именно на курс С#, то вы явно хотите научиться делать игры или приложения. И скорее всего вы студент или школьник. Раз вы зашли на столько далеко, что нашли это приложение и скачали, то у вас явно диагноз – вы программист. Осталось это проверить. Если вы сможете преодолеть лень и быть достаточно упорными перед задачами, то вы сможете подтвердить свой диагноз. Но пока ваш уровень знаний равен уровню знаний моей бабушки в этом деле.
</item>
        <item>
            В течении курса вы сможете отслеживать свою статистику и узнавать все больше и больше нового.
Параллельно с прохождением курса вам нужно будет следить и защищать несколько вселенных. Для этого мы вам дарим портальную пушку. Можно сказать, что вы наш агент по спасению вселенных!
Начнем наше приключение!
        </item>
    </string-array>

    <string-array name="CSHARP_1">
         <item>\tУрок 1\n\t«Стажировка»\n\n
Поздравляем с первым рабочим днем! Начнем с простого – Переменные. Сегодня ты не пойдешь на задания, а будешь отрабатывать основы! Скучно, но это важно.
Переменная – это именованная область памяти. В переменную можно записывать данные и считывать. Данные, записанные в переменной, называются значением переменной.
Попробую тебе объяснить на примере: У тебя есть коробка. В ней пока пусто, но ты можешь туда можешь положить что-то. Коробки все подписаны, чтобы ты знал что куда класть. По сути коробка это и есть переменная.
Таких коробок у тебя много(На следующей странице смотри таблицу), но для начала тебе пригодятся все несколько переменных – это int(Числовой), чар(буквенный), bool.
</item>
        <item>\tТаблица переменных\n\n
        </item>
        <item>Тип – это то, как коробка подписана. Область значения – это какие значения можно положить в коробку. Размер – это сколько памяти в компьютере занимает данный тип.\n
И так с теорией все понятно. Теперь передем к коду. Перед тем как использовать переменную ее нужно объявить и присвоить к ней что-нибудь.\n\nint a; объявляем переменную a типа int\na = 5;  записываем в переменную a число 5\n
bool d;  объявляем переменную d типа bool\n
d = true;  записываем в переменную d значение true (истина)\n
чар g = \'g\';  объявление символьной переменой g с ее инициализацией значением символа \'g\'\n\nПри использовании переменной, в которую не было записано значение, компилятор выдаст ошибку "Use of unassigned local variable [variableName]".\n
Язык Си-шарп чувствительный к регистру символов. Переменные max и Max это не одно и то же. Не забывайте этого, чтобы не иметь лишних проблем.\n
Имя переменной должно отображать суть данных, которые она отображает. Не стоит называть переменные ни о чем не говорящими именами типа a, b, c. Используйте английские слова. Высота – height, возраст – age и т. д.\n
НИКОГДА не используйте кириллические символы в именах переменных.
 </item>
        <item>\tПреобразование встроенных типов данных\n\nПеременные одного типа можно преобразовывать в переменные другого типа. Преобразование бывает явным и неявным. Неявное преобразование выполняет компилятор.\nПример неявного преобразования:\n\nint a = 35;\nshort b = 10;\n
        a = b;  неявное преобразование. Так как int большего размера, чем short – утери данных не будет\n
        b = a;  ошибка компиляции, нельзя тип большего размера неявно преобразовать в тип меньшего размера\n
        При явном преобразовании необходимо непосредственно перед переменной, которую вы хотите преобразовать, указать в скобках тип, к которому приводится переменная.\n\n
        Пример явного преобразования:\n
        static void Main(string[] args){\n
        \tint a = 35000;\n
        \tshort b = 10;\n
        \tb = (short) a;  в этом случае уже ошибки не будет.\n
        \tТак как максимальное значение типа short 32767, здесь будет утеря данных.\n
        }\n
        </item>
        <item>\tКонстанты\n\n
Константа – это переменная, значение которой нельзя изменить. Константы используются для гарантирования того, что данные в этой переменной не изменятся.\n
Для того, чтобы объявить константу, перед обычным объявлением переменной нужно добавить ключевое слово const:\n\n
const int months = 12;  объявление константы\nmonths = 13;  ошибка компиляции\n\n
При объявлении константы она должна обязательно быть проинициализирована значением.\n
Константы также делают ваш код более красивым, читаемым.\n\nconst int months = 12;\nconst int monthSalary = 1024;\nint yearSalary = monthSalary * months;\n\n
Гораздо понятнее чем:\n\n
int yearSalary = 12 * 1024;\n\n
Константы могут быть двух типов: простые литералы и строчные:\n\n
Console.WriteLine(100);  100 есть 100 и этого не изменить, это константа, а точнее числовой литерал\nConsole.WriteLine("Hello!");  строка “Hello!” является строчным литералом\n\n
Здесь стоит отличать константы от переменных-констант, последние имеют имя, как в примере с месяцами и зарплатой.
        </item>
    </string-array>

    <string-array name="CSHARP_2">
        <item>хотю быть котом</item>
        <item>или псом</item>
        <item>или черепахой</item>
    </string-array>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
</resources>